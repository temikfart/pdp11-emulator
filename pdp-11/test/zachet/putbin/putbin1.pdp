. = 200
A:  .WORD   131313, 1, 2, 3, 4, 5, -1, 10, 40, 1000, 100000, 6543, 0

. = 1000

main:	mov	#main,sp	; init stack

;    mov #A, r5
;loop:    
;	mov	(r5)+, r0
;    beq end
    mov @#A, r0
	jsr	pc, putbin
	jsr	pc, newline
;    br loop
end:
	halt


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; putchar
;   input:	RO - ascii char
;   output:	none
;   clobber:	flags
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ocsr = 0177564	; TTO command and status register for PDP-11
odat = 0177566  ; TTO data register
;
putchar:tstb	@#ocsr		; test bit 7 in ocsr (it's sign bit!!!)
	bpl	putchar		; if ( bit 7 == 0 ) wait ... device is busy
	movb	r0,@#odat	; put char to the odat
	rts	pc		; return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; puts
;   input:	RO - asciz string
;   output:	none
;   clobber:	flags, r0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
puts:	mov	r1,-(sp)	; save r1 in stack
	mov	r0,r1		; copy addr to r1
l1:	movb	(r1)+,r0	; put next char to r0
	beq	l2		; if (r0 == 0) goto l2
	jsr	pc,putchar	; call putchar()
	br	l1		; goto l1
l2:	mov	(sp)+,r1	; restore r1 from stack
	rts	pc		; return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; putbin  show number in tto in bin representation
;   input:	RO
;   output:	tto
;   clobber:	flags, r0
; R1 - the saved number
; R2 - loop counter
; R0 - digit and ascii code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

putbin:	
	mov	r1,-(sp)	; save r1 in stack
	mov	r2,-(sp)	; save r2 in stack

	mov	r0, r1		; copy number to r1
	mov	#20, r2		; 16 bit's counter
    
put2_loop:    
    mov r1, r0      ; copy number
put2_digit: 
    mov #'0, r0
    tst r1
    bpl put_digit
    inc r0
put_digit:
    jsr pc, putchar
    rol r1
    sob r2, put2_digit
    
	mov	(sp)+,r2	; restore r2 from stack
	mov	(sp)+,r1	; restore r1 from stack
	rts	pc		; return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; newline  print CRLF into tto
;   input:	RO
;   output:	tto
;   clobber:	flags, r0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
newline:
	mov	#crlf, r0
	jsr	pc, puts
	rts	pc

hello:	.asciz	<12><15>/hello, world!/<12><15>
crlf:	.asciz	<12><15>

	.end	main
