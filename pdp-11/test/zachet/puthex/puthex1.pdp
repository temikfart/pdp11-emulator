. = 200
A:  .WORD   11064, 2, 3, 4, 5, -1, 10, 40, 1000, 100000, 6543, 0

. = 1000

main:	mov	#main,sp	; init stack

;    mov #A, r1
;loop:    
;	mov	(r1)+, r0
;    beq r0, end
    mov @#A, r0
	jsr	pc, puthex
	jsr	pc, newline
;    br loop
end:
	halt


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; putchar
;   input:	RO - ascii char
;   output:	none
;   clobber:	flags
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ocsr = 0177564	; TTO command and status register for PDP-11
odat = 0177566  ; TTO data register
;
putchar:tstb	@#ocsr		; test bit 7 in ocsr (it's sign bit!!!)
	bpl	putchar		; if ( bit 7 == 0 ) wait ... device is busy
	movb	r0,@#odat	; put char to the odat
	rts	pc		; return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; puts
;   input:	RO - asciz string
;   output:	none
;   clobber:	flags, r0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
puts:	mov	r1,-(sp)	; save r1 in stack
	mov	r0,r1		; copy addr to r1
l1:	movb	(r1)+,r0	; put next char to r0
	beq	l2		; if (r0 == 0) goto l2
	jsr	pc,putchar	; call putchar()
	br	l1		; goto l1
l2:	mov	(sp)+,r1	; restore r1 from stack
	rts	pc		; return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; puthex  show number in tto in hex representation
;   input:	RO
;   output:	tto
;   clobber:	flags, r0
; R1 - the saved number
; R2 - loop counter
; R3 - shift by n bits
; R0 - digit and ascii code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
HEX:    .ASCIZ      /0123456789ABCDEF/
        .EVEN
puthex:	
	mov	r1,-(sp)	; save r1 in stack
	mov	r2,-(sp)	; save r2 in stack
	mov	r3,-(sp)	; save r3 in stack

	mov	r0,r1		; copy number to r1
	mov	#4, r2		; 16 bit's counter
    mov #-14, r3     ; first shift by 14 bits
    
put16_loop:    
    mov r1, r0      ; copy number
    ash r3, r0      ; r0 >> r3
	bic	#~17, r0    ; (r0 >> r3) & 0xF
    add #HEX, r0    ; r0 = HEX[r0]
    movb (r0), r0   ; r0 = *r0
    jsr	pc, putchar ; printf("%c", r0)
    add #4, r3
	sob	r2, put16_loop 
	
	mov	(sp)+,r3	; restore r3 from stack
	mov	(sp)+,r2	; restore r2 from stack
	mov	(sp)+,r1	; restore r1 from stack
	rts	pc		; return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; newline  print CRLF into tto
;   input:	RO
;   output:	tto
;   clobber:	flags, r0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
newline:
	mov	#crlf, r0
	jsr	pc, puts
	rts	pc

hello:	.asciz	<12><15>/hello, world!/<12><15>
crlf:	.asciz	<12><15>

	.end	main
