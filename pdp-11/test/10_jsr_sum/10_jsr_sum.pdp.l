000000:		    . = 100                     ; данные располагаются с 100 адреса
000100:		A:  .WORD 34, 12, -1, 66, 0     ; массив (А - константа, равна адресу 100), сумма = 133, так как все числа восьмеричные
	 000034
	 000012
	 177777
	 000066
	 000000
000112:		
000112:		    .=1000                     ; код располагается с 1000 адреса
001000:		main:
001000:			mov #main, sp
	 012706
	 001000
001004:		    mov #A, R2                 ; R2 - адрес начала массива
	 012702
	 000100
001010:		    clr R0                     ; R0 = 0
	 005000
001012:		    jsr pc, sum
	 004767
	 000002
001016:		    halt
	 000000
001020:		    
001020:		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
001020:		; RECURSIVELY sum 1 data in the A array and store the sum into R0
001020:		;    R0 - sum
001020:		;    R2 - address
001020:		;    R3 - (byte)A[R1]
001020:		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
001020:		sum:
001020:		    mov (R2)+, R3              ; R3 = *R2; R2++ записывает в R3 число, лежащее по адресу, хранимому в R2, этот адрес увеличивается
	 012203
001022:		    beq END                    ; дошли до 0 и дальше в рекурсию не углубляемся
	 001403
001024:		    add R3, R0                 ; очередное число прибавляется к текущей сумме
	 060300
001026:		    jsr pc, sum                ; следующий вызов функции должен суммировать следующее число
	 004767
	 177766
001032:		END:    
001032:		    rts pc
	 000207
