; expected:
; r0=000204 r2=002471 r4=172345 sp=000000
; r1=116270 r3=164713 r5=000000 pc=001036
; psw=000011: cm=k pm=k pri=0   n  c [10]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Реализовать команду ASH
; Двоичный код ASH:  0 111 010 rrr sss sss
; Формат ассемблера: ASH src, reg
; Регистр reg сдвинутый на n бит влево (n>0) или вправо (n<0),
; где n - значение шести младших битов src.
; N, Z - по результату операции
; C - загружается значением последнего бита, сдвинутого из регистра.
; V - устанавливается, если в любой момент во время сдвига самый
; старший бит регистра изменил свое значение, иначе сбрасывается.
; 6 младших бит источника берутся со знаком, так что -32 <= n <= 31.
; При n>=0, то сдвиг влево на n бит. 
; Самый старший бит 15 сдвигается в С, в самый младший записывается 0.
; При n<0, то сдвиг вправо на n бит. 
; Самый младший бит 0 сдвигается в С.
; Значение освободившегося самого старшего бита 15 воспроизводится.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; oct: 123456
; test1  ash 2
; bin:   1 010 011 100 101 110 123456 << 2, C=0
; ash: 0 1 001 110 010 111 000 116270
; test2  ash -2 (воспроизводится 0)
; bin:   0 001 010 011 100 110 012346 >> 2, C=1
; bin:   0 000 010 100 111 001 002471 
; test3  ash -2 (воспроизводится 1)
; bin:   1 010 011 100 101 101 123455 >> 2, C=0
; ash:   1 110 100 111 001 011 164713
; test4  ash -3 (первые 6 бит со знаком)     01 111 101 = 175
; bin:   1 010 011 100 101 101 123455 >> 3, C=1
; ash:   1 111 010 011 100 101 172345
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    .=200
A:  .WORD  123456, 012346, 123455

    .=1000
    mov #A, R0      ; R0 = 200
    mov (R0)+, R1   ; R1 = 123456
    mov (R0)+, R2   ; R2 = 012346
    mov (R0), R3    ; R3 = 123455
    mov (R0), R4    ; R4 = 123455
    
                    
    ash #2, R1      ; R1: 123456 << 2 = 116270, C=0
    ash #-2, R2     ; R2: 012346 >> 2 = 002471, C=1
    ash #-2, R3     ; R3: 123455 >> 2 = 164713, C=0
    ash #175, R4    ; R4: 123455 >> 3 = 172345, C=1
    
    halt
