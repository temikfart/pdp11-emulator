000000:		; expected:
000000:		; r0=000204 r2=002471 r4=172345 sp=000000
000000:		; r1=116270 r3=164713 r5=000000 pc=001036
000000:		; psw=000011: cm=k pm=k pri=0   n  c [10]
000000:		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000:		; Реализовать команду ASH
000000:		; Двоичный код ASH:  0 111 010 rrr sss sss
000000:		; Формат ассемблера: ASH src, reg
000000:		; Регистр reg сдвинутый на n бит влево (n>0) или вправо (n<0),
000000:		; где n - значение шести младших битов src.
000000:		; N, Z - по результату операции
000000:		; C - загружается значением последнего бита, сдвинутого из регистра.
000000:		; V - устанавливается, если в любой момент во время сдвига самый
000000:		; старший бит регистра изменил свое значение, иначе сбрасывается.
000000:		; 6 младших бит источника берутся со знаком, так что -32 <= n <= 31.
000000:		; При n>=0, то сдвиг влево на n бит. 
000000:		; Самый старший бит 15 сдвигается в С, в самый младший записывается 0.
000000:		; При n<0, то сдвиг вправо на n бит. 
000000:		; Самый младший бит 0 сдвигается в С.
000000:		; Значение освободившегося самого старшего бита 15 воспроизводится.
000000:		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000:		; oct: 123456
000000:		; test1  ash 2
000000:		; bin:   1 010 011 100 101 110 123456 << 2, C=0
000000:		; ash: 0 1 001 110 010 111 000 116270
000000:		; test2  ash -2 (воспроизводится 0)
000000:		; bin:   0 001 010 011 100 110 012346 >> 2, C=1
000000:		; bin:   0 000 010 100 111 001 002471 
000000:		; test3  ash -2 (воспроизводится 1)
000000:		; bin:   1 010 011 100 101 101 123455 >> 2, C=0
000000:		; ash:   1 110 100 111 001 011 164713
000000:		; test4  ash -3 (первые 6 бит со знаком)     01 111 101 = 175
000000:		; bin:   1 010 011 100 101 101 123455 >> 3, C=1
000000:		; ash:   1 111 010 011 100 101 172345
000000:		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000:		
000000:		    .=200
000200:		A:  .WORD  123456, 012346, 123455
	 123456
	 012346
	 123455
000206:		
000206:		    .=1000
001000:		    mov #A, R0      ; R0 = 200
	 012700
	 000200
001004:		    mov (R0)+, R1   ; R1 = 123456
	 012001
001006:		    mov (R0)+, R2   ; R2 = 012346
	 012002
001010:		    mov (R0), R3    ; R3 = 123455
	 011003
001012:		    mov (R0), R4    ; R4 = 123455
	 011004
001014:		    
001014:		                    
001014:		    ash #2, R1      ; R1: 123456 << 2 = 116270, C=0
	 072127
	 000002
001020:		    ash #-2, R2     ; R2: 012346 >> 2 = 002471, C=1
	 072227
	 177776
001024:		    ash #-2, R3     ; R3: 123455 >> 2 = 164713, C=0
	 072327
	 177776
001030:		    ash #175, R4    ; R4: 123455 >> 3 = 172345, C=1
	 072427
	 000175
001034:		    
001034:		    halt
	 000000
