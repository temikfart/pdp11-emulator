; expected:
; r0=000204 r2=172345 r4=000000 sp=000000
; r1=152345 r3=156543 r5=000000 pc=001024
; psw=000010: cm=k pm=k pri=0   n    [7]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Реализовать команду ASHC
; Двоичный код ASHC:  0 111 011 rrr sss sss
; Формат ассемблера: ASHC src, reg
; 32-битное слово, состоящее из [reg, reg|1],
; сдвинуть на n бит влево (n>0) или вправо (n<0),
; где n - значение шести младших битов src.
; N, Z - по результату операции
; C - загружается значением последнего бита, сдвинутого из регистра.
; V - устанавливается, если в любой момент во время сдвига самый
; старший бит 32-битного слова изменил свое значение, иначе сбрасывается.
; 6 младших бит источника берутся со знаком, так что -32 <= n <= 31.
; При n>=0, то сдвиг влево на n бит. 
; Самый старший бит 31 сдвигается в С, в самый младший записывается 0.
; При n<0, то сдвиг вправо на n бит. 
; Самый младший бит 0 сдвигается в С.
; Значение освободившегося самого старшего бита 31 воспроизводится.
; Если номер регистра НЕЧЕТНЫЙ, то 
; сдвиг влево эквивалентен ASH src, reg
; сдвиг вправо - ЦИКЛИЧЕСКИЙ (флаг С в него не вовлекается)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; oct: 123456 165432
; test1  ash 3
; bin:   1 010 011 100 101 110 1 110 101 100 011 010 = 123456 165432 << 3, C=1
; ash: (1) 0 011 100 101 110 111 0 101 100 011 010 000 = 034567 054320 = R2 R3
; test2  ashc -3 (воспроизводится 0)
; bin:   0 001 010 011 100 110  1 110 101 100 011 010 = 012346 165432 >> 3, C=0
; ashc:  0 000 001 010 011 100 1 101 110 101 100 011 = 001234 156543 = R4 R5
; test3  ash -3 (воспроизводится 1)
; bin:   1 010 011 100 101 110 1 110 101 100 011 010 = 123456 165432 >> 3, C=0
; ashc:  1 111 010 011 100 101 1 101 110 101 100 011= 172345 156543
; test4  ash -3 (первые 6 бит со знаком)     01 111 101 = 175
; как в test3 для четного регистра - в файле 2. 
; test4  ash -3 (первые 6 бит со знаком)     01 111 101 = 175
; для нечетного регистра R1
; bin:   1 010 011 100 101 101 123456 >> 3, C=1
; ash:   110 1 010 011 100 101 152345
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    .=200
A:  .WORD  123456, 165432

    .=1000
    mov #A, R0      ; R0 = 200
    mov (R0),  R1   ; R1 = 123456 test 4 for odd reg
    mov (R0)+, R2   ; R2 = 123456 test 4
    mov (R0)+, R3   ; R3 = 165432
                    
    ashc #175, R2     ; 172345 156543 = R2 R3, C=0
    ashc #175, R1     ; 123455 >> 3 = 152345, C=0 (cycle rotation)
    
    halt
